#include "thingProperties.h"
#include <Stepper.h>
#include <ESP8266WiFi.h>
#include <SHT85.h>

const int stepsPerRevolution = 200;  // Number of steps per revolution for your motor
int currentWindowPosition = 0; // 0 = closed
Stepper myStepper(stepsPerRevolution, D1, D2, D3, D4);  // Update these pins as necessary

void setup() {
  Serial.begin(9600);
  delay(1500); 

  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  myStepper.setSpeed(60);  // Set initial speed (RPM)

  //window_motor.setSwitch(false);
}

void loop() {
  ArduinoCloud.update();
}

void onWindowTempChange()  { //Since WindowTemp is READ_WRITE variable, onWindowTempChange() is executed every time a new value is received from IoT Cloud.
  // Add your code here to act upon WindowTemp change
}

void onWindowMotorChange()  { // Since WindowMotor is READ_WRITE variable, onWindowMotorChange() is executed every time a new value is received from IoT Cloud.
  myStepper.step(rotationDistance(window_motor.getSwitch()));
  setStepperIdle();
}

int rotationDistance(bool directionCheck) { // true = open | false = close
  double brightness = window_motor.getBrightness() * 0.01;
  int windowDistance = 5;
  int plannedRotations = 0;
  int direction = directionCheck ? 1 : -1;

  if (brightness < 0.2) {
    brightness = 0.2;
  }

  plannedRotations = stepsPerRevolution * windowDistance * brightness * direction; // 200 * 5 * 0.2 * 1 = 200

  plannedRotations = plannedRotations - currentWindowPosition;

  if (direction == 1) {
    currentWindowPosition += plannedRotations;
  }
  else {
    plannedRotations = -currentWindowPosition;
    currentWindowPosition = 0;
  }

  Serial.print("Current Position: ");
  Serial.println(currentWindowPosition);
  Serial.print("Moving: ");
  Serial.println(plannedRotations);

  return plannedRotations;
}

void setStepperIdle() {
  Serial.println("Idle...");
  digitalWrite(D1, LOW);
  digitalWrite(D2, LOW);
  digitalWrite(D3, LOW);
  digitalWrite(D4, LOW);
}