#include "thingProperties.h"
#include <Stepper.h>
#include <ESP8266WiFi.h>
#include <SHT85.h>
#include <EEPROM.h>

int currentWindowPosition = 0;    // 0 = closed

const int stepsPerRevolution = 200;
const int positionAddress = 0;    // EEPROM address to store currentWindowPosition through power-outs/crashes
const int windowLength = 9;       // window travel length (mystery units)

Stepper myStepper(stepsPerRevolution, D1, D2, D3, D4);

int plannedRotations = 0;
bool motorRunning = false;

void setup() {
  Serial.begin(9600);
  delay(1500);

  currentWindowPosition = readPosition();

  if (currentWindowPosition < 0 || currentWindowPosition > (stepsPerRevolution * windowLength)) {
    currentWindowPosition = 0;
    savePosition(currentWindowPosition);
  }

  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  myStepper.setSpeed(60);
}

void loop() {
  ArduinoCloud.update();

  if (motorRunning) {
    if (plannedRotations != 0) {
      int stepDirection = (plannedRotations > 0) ? 1 : -1;
      myStepper.step(stepDirection);
      plannedRotations += (plannedRotations > 0) ? -1 : 1;
      currentWindowPosition += stepDirection;
      yield();
    }
    else {
      setStepperIdle();
      motorRunning = false;
      savePosition(currentWindowPosition);
    }
  }
}

void onWindowTempChange() {
  // to-do
}

void onWindowMotorChange() {
  int newTargetPosition = calculateTargetPosition(window_motor.getSwitch());
  // Calculate steps needed based on new target position
  plannedRotations = newTargetPosition - currentWindowPosition;
  motorRunning = true;

  // Save the initial position before starting movement
  savePosition(currentWindowPosition);
}

void setStepperIdle() {
  Serial.println("Idle...");
  digitalWrite(D1, LOW);
  digitalWrite(D2, LOW);
  digitalWrite(D3, LOW);
  digitalWrite(D4, LOW);
}

int calculateTargetPosition(bool directionCheck) { // true = open | false = close
  double brightness = window_motor.getBrightness() * 0.01;
  int direction = directionCheck ? 1 : -1;

  int newTargetPosition = stepsPerRevolution * windowLength * brightness * direction;

  if (!directionCheck) {
    newTargetPosition = 0; // if closing target position 0
  }

  Serial.print("Current Position: ");
  Serial.println(currentWindowPosition);
  Serial.print("Moving To: ");
  Serial.println(newTargetPosition);
  Serial.print("Moving By: ");
  Serial.println(newTargetPosition - currentWindowPosition);

  return newTargetPosition;
}

void savePosition(int position) {
  EEPROM.begin(512);
  EEPROM.put(positionAddress, position);
  EEPROM.commit();
  EEPROM.end();
}

int readPosition() {
  EEPROM.begin(512);
  int position;
  EEPROM.get(positionAddress, position);
  EEPROM.end();
  return position;
}