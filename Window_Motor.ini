#include "thingProperties.h"
#include <Stepper.h>
#include <ESP8266WiFi.h>
#include <SHT85.h>

const int stepsPerRevolution = 200; 
int currentWindowPosition = 0; // 0 = closed
Stepper myStepper(stepsPerRevolution, D1, D2, D3, D4);

int plannedRotations = 0;
bool motorRunning = false;

void setup() {
  Serial.begin(9600);
  delay(1500);

  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  myStepper.setSpeed(60);
}

void loop() {
  ArduinoCloud.update();

  if (motorRunning) {
    if (plannedRotations != 0) {
      myStepper.step((plannedRotations > 0) ? 1 : -1);
      plannedRotations += (plannedRotations > 0) ? -1 : 1;

      yield(); // reset watchdog timer
    } else {
      setStepperIdle();
      motorRunning = false;
    }
  }
}

void onWindowTempChange() {
  // to-do
}

void onWindowMotorChange() {
  if (!motorRunning) {
    plannedRotations = rotationDistance(window_motor.getSwitch());
    motorRunning = true;
  }
}

void setStepperIdle() {
  Serial.println("Idle...");
  digitalWrite(D1, LOW);
  digitalWrite(D2, LOW);
  digitalWrite(D3, LOW);
  digitalWrite(D4, LOW);
}

int rotationDistance(bool directionCheck) { // true = open | false = close
  double brightness = window_motor.getBrightness() * 0.01;
  int windowDistance = 5;
  int direction = directionCheck ? 1 : -1;

  if (brightness < 0.2) {
    brightness = 0.2;
  }

  int newPlannedRotations = stepsPerRevolution * windowDistance * brightness * direction; // ex. 200 * 5 * 0.2 * 1 = 200

  newPlannedRotations -= currentWindowPosition;

  if (direction == 1) {
    currentWindowPosition += newPlannedRotations;
  } else {
    newPlannedRotations = -currentWindowPosition;
    currentWindowPosition = 0;
  }

  Serial.print("Current Position: ");
  Serial.println(currentWindowPosition);
  Serial.print("Moving: ");
  Serial.println(newPlannedRotations);

  return newPlannedRotations;
}